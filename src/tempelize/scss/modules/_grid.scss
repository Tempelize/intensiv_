// _grid.scss
// le fait de mettre un '_' devant le nom du fichier indique à sass que le fichier est un fichier partiel
// et qu'il n'a pas besoin de le recompiler tant qu'il n'a pas été déplacé
// qu'il est réutilisable un peu comme un framework
// GRID
//--------------------------------------------------------------
// CLASS DISPONIBLES
// .grid => placement en grid
// .grid-gap-y-x => gap de la grid en px de 0 à 25px y=écart entre ligne et x=écart entre colonne
// .xs-col-12 => 12 colonnes pour écran de taille xs (voir _init.scss)
// .s-col-8 => 8 colonnes pour écran de taille s ......
// .m-row-2 => 2 lignes pour écran de taille m ......
// .l-offset-2-span-4 => décalage de 2 colonnes et s'étend sur 4 colonnes
// .xl-offset-4-span-0 => décalge de 4 colonnes et prend une colonne
//------------------------------------------------------------
// VARIABLES

//-------------------------------------------------------------
// MODULE SPECIFICATIONS

// LA GRID
.grid {
	display: grid;
	grid-template-columns: repeat(12, 1fr);
	// gap: $gap-grid;
	> * {
		grid-column: span 12;
		grid-row: span 1;
		// border: 1px solid gray;
	}
}
// GAP DE LA GRID
@for $i from 0 through 25 {
	@for $y from 0 through 25 {
		.grid-gap-#{$i}-#{$y} {
			gap: #{$i}px #{$y}px;
		}
	}
}
// screen-sizes = tableau contenant une variable et un tableau (map)
// $label = (xs,s,m,l,xl)
// $values = ("breakpoint","container-size")
// PATTERN
// xs-col-6
// xl-row-2
// xl-offset-2-span-3
@each $label, $values in $screen-sizes {
	//Tous les écrans à partir de (min-width)
	@media screen and (min-width: map-get($values, "breakpoint")) {
		// .container {
		// 	width: 100%;
		// 	max-width: map-get($values, "container-size");
		// 	margin: 0 auto;
		// 	padding: 0 1rem;
		// }
		@for $i from 1 through 12 {
			.#{$label}-col-#{$i} {
				grid-column: span + " " + #{$i};
			}
			.#{$label}-row-#{$i} {
				grid-row: span + " " + #{$i};
			}
			@for $j from 0 through 11 {
				//11 car pas d'offset de 12
				.#{$label}-offset-#{$j}-span-#{$i} {
					// grid-column-start: 3;
					// grid-column-end: span 4;
					grid-column: #{$j + 1} / span + " " + #{$i};
				}
			}
		}
	}
}

// @each $label, $breakpoint, $containerWidth in $gridValues {
// 	@media screen and (min-width:#{$breakpoint}) {
// 		.container {
// 			width: #{$containerWidth};
// 			margin: 0 auto;
// 			padding: 0 1rem;
// 		}
// 		@for $i from 1 through 12 {
// 			.col#{$label}-#{$i} {
// 				grid-column: span + " " + #{$i};
// 			}
// 			.row#{$label}-#{$i} {
// 				grid-row: span + " " + #{$i};
// 			}
// 			@for $j from 0 through 11 {
// 				//11 car pas d'offset de 12
// 				.offset#{$label}-#{$j}-span-#{$i} {
// 					// grid-column-start: 3;
// 					// grid-column-end: span 4;
// 					grid-column: #{$j + 1} / span + " " + #{$i};
// 				}
// 			}
// 		}
// 	}
// }

// #testoffset-2{
// 	grid-column-start: 3;
// 	grid-column-end: span 10;   //pour aller de la colonne 3 à la 12
// }

// en fonction du nombre de colonne le span doit s'adapter
// .offset-2.col-4 {
// 	grid-column-start: 3;
// 	grid-column-end: span 4; //pour aller de la colonne 3 à la 6 (3,4,5,6)
// }

// .offset-6.col-6 {
// 	grid-column-start: 7;
// 	grid-column-end: span 6;
// }
